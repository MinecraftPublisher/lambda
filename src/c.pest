TranslationUnit     = { Spacing ~ (ExternalDeclaration | SEMI)* ~ EOI }
ExternalDeclaration = { FunctionDefinition | Declaration }
FunctionDefinition  = { DeclarationSpecifiers ~ Declarator ~ DeclarationList? ~ CompoundStatement }
DeclarationList     = { Declaration+ }

Declaration = { DeclarationSpecifiers ~ InitDeclaratorList? ~ SEMI }

DeclarationSpecifiers = {
    ((StorageClassSpecifier | TypeQualifier | FunctionSpecifier)* ~ TypedefName ~ (StorageClassSpecifier | TypeQualifier | FunctionSpecifier)*)
  | (StorageClassSpecifier | TypeSpecifier | TypeQualifier | FunctionSpecifier)+
}

InitDeclaratorList = { InitDeclarator ~ (COMMA ~ InitDeclarator)* }

InitDeclarator = { Declarator ~ (EQU ~ Initializer)? }

StorageClassSpecifier = { TYPEDEF | EXTERN | STATIC | AUTO | REGISTER | (ATTRIBUTE ~ LPAR ~ LPAR ~ (!RPAR ~ ANY)* ~ RPAR ~ RPAR) }

TypeSpecifier = { VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | BOOL | COMPLEX | StructOrUnionSpecifier | EnumSpecifier }

StructOrUnionSpecifier = { StructOrUnion ~ (Identifier? ~ LWING ~ StructDeclaration* ~ RWING | Identifier) }

StructOrUnion = { STRUCT | UNION }

StructDeclaration = { (SpecifierQualifierList ~ StructDeclaratorList?)? ~ SEMI }

SpecifierQualifierList = { (TypeQualifier* ~ TypedefName ~ TypeQualifier*) | (TypeSpecifier | TypeQualifier)+ }

StructDeclaratorList = { StructDeclarator ~ (COMMA ~ StructDeclarator)* }

StructDeclarator = { Declarator? ~ COLON ~ ConstantExpression | Declarator }

EnumSpecifier = { ENUM ~ (Identifier? ~ LWING ~ EnumeratorList ~ COMMA? ~ RWING | Identifier) }

EnumeratorList = { Enumerator ~ (COMMA ~ Enumerator)* }

Enumerator = { EnumerationConstant ~ (EQU ~ ConstantExpression)? }

TypeQualifier = { CONST | RESTRICT | VOLATILE | DECLSPEC ~ LPAR ~ Identifier ~ RPAR }

FunctionSpecifier = { INLINE | STDCALL }

Declarator = { Pointer? ~ DirectDeclarator }

DirectDeclarator = {
    (Identifier | LPAR ~ Declarator ~ RPAR) ~ (LBRK ~ TypeQualifier* ~ AssignmentExpression? ~ RBRK | LBRK ~ STATIC ~ TypeQualifier* ~ AssignmentExpression ~ RBRK | LBRK ~ TypeQualifier+ ~ STATIC ~ AssignmentExpression ~ RBRK | LBRK ~ TypeQualifier* ~ STAR ~ RBRK | LPAR ~ ParameterTypeList ~ RPAR | LPAR ~ IdentifierList? ~ RPAR)*
}

Pointer = { (STAR ~ TypeQualifier*)+ }

ParameterTypeList = { ParameterList ~ (COMMA ~ ELLIPSIS)? }

ParameterList = { ParameterDeclaration ~ (COMMA ~ ParameterDeclaration)* }

ParameterDeclaration = {
    DeclarationSpecifiers ~ (Declarator | AbstractDeclarator)?
}

IdentifierList = { Identifier ~ (COMMA ~ Identifier)* }

TypeName = { SpecifierQualifierList ~ AbstractDeclarator? }

AbstractDeclarator = {
    Pointer? ~ DirectAbstractDeclarator
  | Pointer
}

DirectAbstractDeclarator = {
    (LPAR ~ AbstractDeclarator ~ RPAR | LBRK ~ (AssignmentExpression | STAR)? ~ RBRK | LPAR ~ ParameterTypeList? ~ RPAR) ~ (LBRK ~ (AssignmentExpression | STAR)? ~ RBRK | LPAR ~ ParameterTypeList? ~ RPAR)*
}

TypedefName = { Identifier }

Initializer = {
    AssignmentExpression
  | LWING ~ InitializerList ~ COMMA? ~ RWING
}

InitializerList = { Designation? ~ Initializer ~ (COMMA ~ Designation? ~ Initializer)* }

Designation = { Designator+ ~ EQU }

Designator = {
    LBRK ~ ConstantExpression ~ RBRK
  | DOT ~ Identifier
}

Statement = {
    LabeledStatement
  | CompoundStatement
  | ExpressionStatement
  | SelectionStatement
  | IterationStatement
  | JumpStatement
}

LabeledStatement = {
    Identifier ~ COLON ~ Statement
  | CASE ~ ConstantExpression ~ COLON ~ Statement
  | DEFAULT ~ COLON ~ Statement
}

CompoundStatement = { LWING ~ (Declaration | Statement)* ~ RWING }

ExpressionStatement = { Expression? ~ SEMI }

SelectionStatement = {
    IF ~ LPAR ~ Expression ~ RPAR ~ Statement ~ (ELSE ~ Statement)?
  | SWITCH ~ LPAR ~ Expression ~ RPAR ~ Statement
}

IterationStatement = {
    WHILE ~ LPAR ~ Expression ~ RPAR ~ Statement
  | DO ~ Statement ~ WHILE ~ LPAR ~ Expression ~ RPAR ~ SEMI
  | FOR ~ LPAR ~ Expression? ~ SEMI ~ Expression? ~ SEMI ~ Expression? ~ RPAR ~ Statement
  | FOR ~ LPAR ~ Declaration ~ Expression? ~ SEMI ~ Expression? ~ RPAR ~ Statement
}

JumpStatement = {
    GOTO ~ Identifier ~ SEMI
  | CONTINUE ~ SEMI
  | BREAK ~ SEMI
  | RETURN ~ Expression? ~ SEMI
}

PrimaryExpression = {
    StringLiteral
  | Constant
  | Identifier
  | LPAR ~ Expression ~ RPAR
}

PostfixExpression = {
    (PrimaryExpression | LPAR ~ TypeName ~ RPAR ~ LWING ~ InitializerList ~ COMMA? ~ RWING) ~ (LBRK ~ Expression ~ RBRK | LPAR ~ ArgumentExpressionList? ~ RPAR | DOT ~ Identifier | PTR ~ Identifier | INC | DEC)*
}

ArgumentExpressionList = { AssignmentExpression ~ (COMMA ~ AssignmentExpression)* }

UnaryExpression = {
    PostfixExpression
  | INC ~ UnaryExpression
  | DEC ~ UnaryExpression
  | UnaryOperator ~ CastExpression
  | SIZEOF ~ (UnaryExpression | LPAR ~ TypeName ~ RPAR)
}

UnaryOperator = {
    AND
  | STAR
  | PLUS
  | MINUS
  | TILDA
  | BANG
}

CastExpression = { (LPAR ~ TypeName ~ RPAR ~ CastExpression) | UnaryExpression }

MultiplicativeExpression = { CastExpression ~ ((STAR | DIV | MOD) ~ CastExpression)* }

AdditiveExpression = { MultiplicativeExpression ~ ((PLUS | MINUS) ~ MultiplicativeExpression)* }

ShiftExpression = { AdditiveExpression ~ ((LEFT | RIGHT) ~ AdditiveExpression)* }

RelationalExpression = { ShiftExpression ~ ((LE | GE | LT | GT) ~ ShiftExpression)* }

EqualityExpression = { RelationalExpression ~ ((EQUEQU | BANGEQU) ~ RelationalExpression)* }

ANDExpression = { EqualityExpression ~ (AND ~ EqualityExpression)* }

ExclusiveORExpression = { ANDExpression ~ (HAT ~ ANDExpression)* }

InclusiveORExpression = { ExclusiveORExpression ~ (OR ~ ExclusiveORExpression)* }

LogicalANDExpression = { InclusiveORExpression ~ (ANDAND ~ InclusiveORExpression)* }

LogicalORExpression = { LogicalANDExpression ~ (OROR ~ LogicalANDExpression)* }

ConditionalExpression = { LogicalORExpression ~ (QUERY ~ Expression ~ COLON ~ LogicalORExpression)* }

AssignmentExpression = {
    UnaryExpression ~ AssignmentOperator ~ AssignmentExpression
  | ConditionalExpression
}

AssignmentOperator = {
    EQU
  | STAREQU
  | DIVEQU
  | MODEQU
  | PLUSEQU
  | MINUSEQU
  | LEFTEQU
  | RIGHTEQU
  | ANDEQU
  | HATEQU
  | OREQU
}

Expression = { Constant | (AssignmentExpression ~ (COMMA ~ AssignmentExpression)*) }

ConstantExpression = { ConditionalExpression }

Spacing = _{
    (WhiteSpace | LongComment | LineComment | Pragma)*
}

WhiteSpace = _{ " " | "\n" | "\r" | "\t" }

LongComment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

LineComment = _{ "//" ~ (!"\n" ~ ANY)* }

Pragma = { "#" ~ (!"\n" ~ ANY)* }

AUTO      = { "auto" ~ !IdChar ~ Spacing }
BREAK     = { "break" ~ !IdChar ~ Spacing }
CASE      = { "case" ~ !IdChar ~ Spacing }
CHAR      = { "char" ~ !IdChar ~ Spacing }
CONST     = { "const" ~ !IdChar ~ Spacing }
CONTINUE  = { "continue" ~ !IdChar ~ Spacing }
DEFAULT   = { "default" ~ !IdChar ~ Spacing }
DOUBLE    = { "double" ~ !IdChar ~ Spacing }
DO        = { "do" ~ !IdChar ~ Spacing }
ELSE      = { "else" ~ !IdChar ~ Spacing }
ENUM      = { "enum" ~ !IdChar ~ Spacing }
EXTERN    = { "extern" ~ !IdChar ~ Spacing }
FLOAT     = { "float" ~ !IdChar ~ Spacing }
FOR       = { "for" ~ !IdChar ~ Spacing }
GOTO      = { "goto" ~ !IdChar ~ Spacing }
IF        = { "if" ~ !IdChar ~ Spacing }
INT       = { "int" ~ !IdChar ~ Spacing }
INLINE    = { "inline" ~ !IdChar ~ Spacing }
LONG      = { "long" ~ !IdChar ~ Spacing }
REGISTER  = { "register" ~ !IdChar ~ Spacing }
RESTRICT  = { "restrict" ~ !IdChar ~ Spacing }
RETURN    = { "return" ~ !IdChar ~ Spacing }
SHORT     = { "short" ~ !IdChar ~ Spacing }
SIGNED    = { "signed" ~ !IdChar ~ Spacing }
SIZEOF    = { "sizeof" ~ !IdChar ~ Spacing }
STATIC    = { "static" ~ !IdChar ~ Spacing }
STRUCT    = { "struct" ~ !IdChar ~ Spacing }
SWITCH    = { "switch" ~ !IdChar ~ Spacing }
TYPEDEF   = { "typedef" ~ !IdChar ~ Spacing }
UNION     = { "union" ~ !IdChar ~ Spacing }
UNSIGNED  = { "unsigned" ~ !IdChar ~ Spacing }
VOID      = { "void" ~ !IdChar ~ Spacing }
VOLATILE  = { "volatile" ~ !IdChar ~ Spacing }
WHILE     = { "while" ~ !IdChar ~ Spacing }
BOOL      = { "_Bool" ~ !IdChar ~ Spacing }
COMPLEX   = { "_Complex" ~ !IdChar ~ Spacing }
STDCALL   = { "_stdcall" ~ !IdChar ~ Spacing }
DECLSPEC  = { "__declspec" ~ !IdChar ~ Spacing }
ATTRIBUTE = { "__attribute__" ~ !IdChar ~ Spacing }

Keyword = {
    ("auto" | "break" | "case" | "char" | "const" | "continue" | "default" | "double" | "do" | "else" | "enum" | "extern" | "float" | "for" | "goto" | "if" | "int" | "inline" | "long" | "register" | "restrict" | "return" | "short" | "signed" | "sizeof" | "static" | "struct" | "switch" | "typedef" | "union" | "unsigned" | "void" | "volatile" | "while" | "_Bool" | "_Complex" | "_Imaginary" | "_stdcall" | "__declspec" | "__attribute__") ~ !IdChar
}

Identifier = @{ !Keyword ~ IdNondigit ~ IdChar* ~ Spacing }

IdNondigit = {
    'a'..'z'
  | 'A'..'Z'
  | "_"
  | UniversalCharacter
}

IdChar = {
    'a'..'z'
  | 'A'..'Z'
  | '0'..'9'
  | "_"
  | UniversalCharacter
}

UniversalCharacter = {
    "\\u" ~ HexQuad
  | "\\U" ~ HexQuad ~ HexQuad
}

HexQuad = { HexDigit ~ HexDigit ~ HexDigit ~ HexDigit }

Constant = {
    FloatConstant
  | IntegerConstant
}

IntegerConstant = {
    (DecimalConstant | HexConstant | OctalConstant) ~ IntegerSuffix? ~ Spacing
}

DecimalConstant = { (('1'..'9') ~ ('1'..'9')*) | "0" }

OctalConstant = { "0" ~ ('0'..'7')* }

HexConstant = { HexPrefix ~ HexDigit+ }

HexPrefix = { "0x" | "0X" }

HexDigit = { 'a'..'f' | 'A'..'F' | '0'..'9' }

IntegerSuffix = {
    ("u" | "U") ~ Lsuffix?
  | Lsuffix ~ ("u" | "U")?
}

Lsuffix = {
    "ll"
  | "LL"
  | "l"
  | "L"
}

FloatConstant = {
    (DecimalFloatConstant | HexFloatConstant) ~ FloatSuffix? ~ Spacing
}

DecimalFloatConstant = {
    Fraction ~ Exponent?
  | ('0'..'9')+ ~ Exponent
}

HexFloatConstant = {
    HexPrefix ~ HexFraction ~ BinaryExponent?
  | HexPrefix ~ HexDigit+ ~ BinaryExponent
}

Fraction = {
    ('0'..'9')* ~ "." ~ ('0'..'9')+
  | ('0'..'9')+ ~ "."
}

HexFraction = {
    HexDigit* ~ "." ~ HexDigit+
  | HexDigit+ ~ "."
}

Exponent = { ("e" | "E") ~ ("+" | "\\" | "-")? ~ ('0'..'9')+ }

BinaryExponent = { ("p" | "P") ~ ("+" | "\\" | "-")? ~ ('0'..'9')+ }

FloatSuffix = { "f" ~ "l" ~ "F" ~ "L" }

EnumerationConstant = { Identifier }

CharacterConstant = { "L"? ~ "'" ~ Char* ~ "'" ~ Spacing }

Char = { Escape | !("'" | "\n" | "\\") ~ ANY }

Escape = {
    SimpleEscape
  | OctalEscape
  | HexEscape
  | UniversalCharacter
}

SimpleEscape = { "\\" ~ ("'" | "\\" | "\"" | "?" | "%" | "a" | "b" | "f" | "n" | "r" | "t" | "v") }
OctalEscape  = { "\\" ~ '0'..'7' ~ ('0'..'7')? ~ ('0'..'7')? }
HexEscape    = { "\\x" ~ HexDigit+ }

StringLiteral = { "L"? ~ ("\"" ~ StringChar* ~ "\"" ~ Spacing)+ }

StringChar = { Escape | !("\"" | "\n" | "\\") ~ ANY }

LBRK     = { "[" ~ Spacing }
RBRK     = { "]" ~ Spacing }
LPAR     = { "(" ~ Spacing }
RPAR     = { ")" ~ Spacing }
LWING    = { "{" ~ Spacing }
RWING    = { "}" ~ Spacing }
DOT      = { "." ~ Spacing }
PTR      = { "->" ~ Spacing }
INC      = { "++" ~ Spacing }
DEC      = { "--" ~ Spacing }
AND      = { "&" ~ !"&" ~ Spacing }
STAR     = { "*" ~ !"=" ~ Spacing }
PLUS     = { "+" ~ !("+" | "=") ~ Spacing }
MINUS    = { "-" ~ !("-" | "=" | ">") ~ Spacing }
TILDA    = { "~" ~ Spacing }
BANG     = { "!" ~ !"=" ~ Spacing }
DIV      = { " |" ~ !"=" ~ Spacing }
MOD      = { "%" ~ !("=" | ">") ~ Spacing }
LEFT     = { "<<" ~ !"=" ~ Spacing }
RIGHT    = { ">>" ~ !"=" ~ Spacing }
LT       = { "<" ~ !"=" ~ Spacing }
GT       = { ">" ~ !"=" ~ Spacing }
LE       = { "<=" ~ Spacing }
GE       = { ">=" ~ Spacing }
EQUEQU   = { "==" ~ Spacing }
BANGEQU  = { "!=" ~ Spacing }
HAT      = { "^" ~ !"=" ~ Spacing }
OR       = { "|" ~ !"=" ~ Spacing }
ANDAND   = { "&&" ~ Spacing }
OROR     = { "||" ~ Spacing }
QUERY    = { "?" ~ Spacing }
COLON    = { ":" ~ !">" ~ Spacing }
SEMI     = { ";" ~ Spacing }
ELLIPSIS = { "..." ~ Spacing }
EQU      = { "=" ~ !"=" ~ Spacing }
STAREQU  = { "*=" ~ Spacing }
DIVEQU   = { " |=" ~ Spacing }
MODEQU   = { "%=" ~ Spacing }
PLUSEQU  = { "+=" ~ Spacing }
MINUSEQU = { "-=" ~ Spacing }
LEFTEQU  = { "<<=" ~ Spacing }
RIGHTEQU = { ">>=" ~ Spacing }
ANDEQU   = { "&=" ~ Spacing }
HATEQU   = { "^=" ~ Spacing }
OREQU    = { "|=" ~ Spacing }
COMMA    = { "," ~ Spacing }

EOT = { !ANY }
